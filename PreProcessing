import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import shap

# Load dataset (downloaded manually from this URL)
data_path = 'pima-indians-diabetes.data.csv'  # update path to your downloaded file
columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI',
           'DiabetesPedigreeFunction', 'Age', 'Outcome']

data = pd.read_csv(data_path, names=columns)

# Replace zero values with NaN for specific columns
cols_with_zero_as_missing = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']
for col in cols_with_zero_as_missing:
    data[col] = data[col].replace(0, pd.NA)

# Fill missing values with median
for col in cols_with_zero_as_missing:
    data[col].fillna(data[col].median(), inplace=True)

# Split features and target
X = data.drop('Outcome', axis=1)
y = data['Outcome']

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train Random Forest Classifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Predictions and evaluation
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

# SHAP values for explainability
explainer = shap.TreeExplainer(model)
shap_values = explainer.shap_values(X_test)

# Save model and scaler for the dashboard (optional, use joblib or pickle)
import joblib
joblib.dump(model, 'diabetes_model.pkl')
joblib.dump(scaler, 'scaler.pkl')
